"""
Django settings for osn_api project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import warnings
warnings.filterwarnings("ignore")

import os
import json
from pathlib import Path
from datetime import timedelta
from os.path import join, dirname
from dotenv import load_dotenv
from pathlib import Path

# Setup environment
ENVIRONMENT = 'development'
STATIC_ROOT ='./static'
env_file_name = ('.env.production' if ENVIRONMENT == 'production' else '.env.dev')
print('== file_name: ', env_file_name)
dotenv_path = join(dirname(__file__), '../' + env_file_name)
load_dotenv(dotenv_path)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = 'media/'
BASE_MEDIA_HOST = os.environ.get('BASE_MEDIA_HOST')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if os.environ.get("DEBUG") == 'True' else False

ALLOWED_HOSTS = json.loads(os.environ.get("ALLOWED_HOSTS"))


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_filters',
    'corsheaders',
    'rest_framework',
    'oauth2_provider',

    'oauth',
    'utils',

    'user_account',
    'media_file',
    'restaurant',
    'menu',
    'transaction',
    'reservation',
    'order',

    'channels',

]

OAUTH2_PROVIDER_APPLICATION_MODEL = 'oauth2_provider.Application'

AUTHENTICATION_BACKENDS = (
    'oauth2_provider.backends.OAuth2Backend',
    'django.contrib.auth.backends.ModelBackend'
)

OAUTH2_DEFAULT_SCOPES = {
    'read': 'read',
    'write': 'write',
    'email': 'email',
    'profile': 'profile'
}

OAUTH2_PROVIDER = {
    'REFRESH_TOKEN_EXPIRE_SECONDS': 86400,
    'ACCESS_TOKEN_EXPIRE_SECONDS': 86400,
    'SCOPES': dict(OAUTH2_DEFAULT_SCOPES),
    'REQUEST_APPROVAL_PROMPT': 'auto_even_if_expired',
    'ERROR_RESPONSE_WITH_SCOPES': True,
}

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
        'utils.authentication.BearerTokenAuthentication'
    ],
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.JSONParser',
    ],
}


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'oauth2_provider.middleware.OAuth2TokenMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'utils.middleware.TokenMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'
ASGI_APPLICATION = "core.asgi.application"


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.environ.get("DATABASE_ENGINE"),
        'NAME': os.environ.get("DATABASE_NAME"),
        'USER': os.environ.get("DATABASE_USER"),
        'PASSWORD': os.environ.get("DATABASE_PASSWORD"),
        'HOST': os.environ.get("DATABASE_HOST"),
        'PORT': os.environ.get("DATABASE_PORT"),
    },
}

# Change user model
AUTH_USER_MODEL = 'user_account.User'

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Email config
EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS")
EMAIL_BACKEND = os.environ.get("EMAIL_BACKEND")
EMAIL_HOST = os.environ.get("EMAIL_HOST")
EMAIL_HOST_PASSWORD=os.environ.get("EMAIL_HOST_PASSWORD")
EMAIL_HOST_USER=os.environ.get("EMAIL_HOST_USER")
EMAIL_PORT = os.environ.get("EMAIL_PORT")
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = os.environ.get("LANGUAGE_CODE")

# TIME_ZONE = 'UTC'
TIME_ZONE = os.environ.get("TIME_ZONE")

# USE_I18N = True

# USE_L10N = True

# USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = os.environ.get("STATIC_URL")
CORS_ALLOW_ALL_ORIGINS = True if os.environ.get("CORS_ALLOW_ALL_ORIGINS") == 'True' else False

PASSWORD_LENGTH = json.loads(os.environ.get("PASSWORD_LENGTH"))
ACTIVATION_CODE_LENGTH = json.loads(os.environ.get("ACTIVATION_CODE_LENGTH"))
TOKEN_LIFETIME = json.loads(os.environ.get("TOKEN_LIFETIME"))
ACTIVATION_CODE_LIFETIME = json.loads(os.environ.get("ACTIVATION_CODE_LIFETIME"))
RESET_PASSWORD_TOKEN_LIFETIME = json.loads(os.environ.get("RESET_PASSWORD_TOKEN_LIFETIME"))
MAX_CODE_LENGTH = json.loads(os.environ.get("MAX_CODE_LENGTH"))
BASE_UI_URL = os.environ.get("BASE_UI_URL")


